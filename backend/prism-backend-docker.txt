# Dockerfile
FROM node:18-alpine

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci --only=production

# Copy application files
COPY . .

# Create uploads directory
RUN mkdir -p uploads/avatars

# Expose port
EXPOSE 5000

# Start the application
CMD ["node", "server.js"]

---

# docker-compose.yml
version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: prism_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build: .
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: production
      PORT: 5000
      DB_NAME: prism_db
      DB_USER: postgres
      DB_PASSWORD: postgres_password
      DB_HOST: postgres
      DB_PORT: 5432
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      JWT_EXPIRE: 7d
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      CLIENT_URL: ${CLIENT_URL:-http://localhost:3000}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        sleep 5 &&
        npm run seed &&
        node server.js
      "

  frontend:
    build: ../frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    environment:
      REACT_APP_API_URL: http://localhost:5000/api

volumes:
  postgres_data:

---

# .dockerignore
node_modules
npm-debug.log
.env
.DS_Store
.git
.gitignore
README.md
.vscode
coverage
.nyc_output